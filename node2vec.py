# -*- coding: utf-8 -*-
"""Node2Vec.ipynb

Automatically generated by Colaboratory.

Node2Vec model
"""

import pandas as pd
import numpy as np
import csv
import networkx as nx
from numpy import dot
from numpy.linalg import norm

#Read from training data directly as an adjacency list and add missing nodes manually
g = nx.read_adjlist("train.txt")
g.add_nodes_from([32, 1611, 2008, 2451, 2692, 2837])

#Reading test data
with open('test-public.csv', newline='') as f:
    reader = csv.reader(f)
    test_data = list(reader)
test_data.pop(0)
print(test_data)

#Putting test data into a dataframe
test = pd.DataFrame.from_records(test_data)
test.drop(0, inplace = True, axis = 1)
test.reset_index
test

#Installing node2vec
!pip install node2vec

# Training the node2vec model on the graph and fitting it
from node2vec import Node2Vec
node2vec = Node2Vec(g, dimensions = 100, walk_length = 16, num_walks = 86)
n2w_model = node2vec.fit(window = 7, min_count = 1)

from numpy import dot
from numpy.linalg import norm

# Function to calculate the cosine similarity between two vectors as per the formula
def cos_sim(x, y):
    dot = np.dot(x, y)
    norm_x = np.linalg.norm(x)
    norm_y = np.linalg.norm(y)
    return dot / (norm_x * norm_y)

# Calculating predictions for each test node pair by taking cosine similarity of
# the vectorized features of each node
predictions = []
for i, j in zip(test[1], test[2]):
  predictions.append((cos_sim(n2w_model[str(i)], n2w_model[str(j)]) + 1)/(2))

# Creating IDs for output file
id = []
for i in range(1,2001):
  id.append(i)

#Putting predictions into a dataframe and writing predictions data frame to output file
pred = pd.DataFrame()
pred["Id"] = id
pred["Predicted"] = predictions
pred.to_csv("preds.csv", index = False)
